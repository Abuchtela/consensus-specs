from collections.abc import Sequence as ColSequence
from remerkleable.basic import boolean as boolean, uint256 as uint256
from remerkleable.core import BackedView as BackedView, FixedByteLengthViewHelper as FixedByteLengthViewHelper, ObjParseException as ObjParseException, ObjType as ObjType, View as View, pack_bits_to_chunks as pack_bits_to_chunks
from remerkleable.readonly_iters import BitfieldIter as BitfieldIter
from remerkleable.tree import Gindex as Gindex, Link as Link, NavigationError as NavigationError, Node as Node, PairNode as PairNode, Root as Root, RootNode as RootNode, get_depth as get_depth, subtree_fill_to_contents as subtree_fill_to_contents, subtree_fill_to_length as subtree_fill_to_length, to_gindex as to_gindex, zero_node as zero_node
from typing import Any, BinaryIO, Type, TypeVar

V = TypeVar('V', bound=View)

class BitsView(BackedView, ColSequence):
    @classmethod
    def coerce_view(cls: Type[V], v: Any) -> V: ...
    @classmethod
    def tree_depth(cls: Any) -> int: ...
    def length(self) -> int: ...
    def get(self, i: int) -> boolean: ...
    def set(self, i: int, v: boolean) -> None: ...
    def __len__(self): ...
    def __getitem__(self, k: Any): ...
    def __setitem__(self, k: Any, v: Any) -> None: ...
    def encode_bytes(self) -> bytes: ...
    @classmethod
    def decode_bytes(cls: Type[V], bytez: bytes) -> V: ...
    @classmethod
    def from_obj(cls: Type[V], obj: ObjType) -> V: ...
    def to_obj(self) -> ObjType: ...
    def navigate_view(self, key: Any) -> View: ...

class Bitlist(BitsView):
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __class_getitem__(cls: Any, limit: Any) -> Type[Bitlist]: ...
    def __iter__(self) -> Any: ...
    @classmethod
    def contents_depth(cls: Any) -> int: ...
    @classmethod
    def tree_depth(cls: Any) -> int: ...
    @classmethod
    def limit(cls: Any) -> int: ...
    @classmethod
    def default_node(cls: Any) -> Node: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...
    @classmethod
    def is_fixed_byte_length(cls: Any) -> bool: ...
    @classmethod
    def min_byte_length(cls: Any) -> int: ...
    @classmethod
    def max_byte_length(cls: Any) -> int: ...
    def length(self) -> int: ...
    def append(self, v: boolean) -> Any: ...
    def pop(self) -> None: ...
    def get(self, i: int) -> boolean: ...
    def set(self, i: int, v: boolean) -> None: ...
    def value_byte_length(self) -> int: ...
    @classmethod
    def decode_bytes(cls: Type[V], bytez: bytes) -> V: ...
    @classmethod
    def deserialize(cls: Type[V], stream: BinaryIO, scope: int) -> V: ...
    def serialize(self, stream: BinaryIO) -> int: ...
    @classmethod
    def navigate_type(cls: Any, key: Any) -> Type[View]: ...
    @classmethod
    def key_to_static_gindex(cls: Any, key: Any) -> Gindex: ...

class Bitvector(BitsView, FixedByteLengthViewHelper):
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __class_getitem__(cls: Any, length: Any) -> Type[Bitvector]: ...
    def __iter__(self) -> Any: ...
    @classmethod
    def tree_depth(cls: Any) -> int: ...
    @classmethod
    def vector_length(cls: Any) -> int: ...
    @classmethod
    def default_node(cls: Any) -> Node: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...
    @classmethod
    def type_byte_length(cls: Any) -> int: ...
    def length(self) -> int: ...
    def get(self, i: int) -> boolean: ...
    def set(self, i: int, v: boolean) -> None: ...
    @classmethod
    def deserialize(cls: Type[V], stream: BinaryIO, scope: int) -> V: ...
    def serialize(self, stream: BinaryIO) -> int: ...
    @classmethod
    def navigate_type(cls: Any, key: Any) -> Type[View]: ...
    @classmethod
    def key_to_static_gindex(cls: Any, key: Any) -> Gindex: ...
