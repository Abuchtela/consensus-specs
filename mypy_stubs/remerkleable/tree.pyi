from typing import Any, Callable, Iterable, Iterator, List, Tuple, TypeVar

def get_depth(elem_count: int) -> int: ...

Gindex: Any
ROOT_GINDEX: Any
LEFT_GINDEX: Any
RIGHT_GINDEX: Any

def to_gindex(index: int, depth: int) -> Gindex: ...
def get_anchor_gindex(gindex: Gindex) -> Gindex: ...
def gindex_bit_iter(gindex: Gindex) -> Tuple[Iterator[bool], int]: ...
def concat_gindices(steps: Iterable[Gindex]) -> Gindex: ...

Root: Any
MerkleFn = Callable[[Root, Root], Root]
ZERO_ROOT: Root

def merkle_hash(left: Root, right: Root) -> Root: ...

Link: Any
SummaryLink: Any

class Node:
    def get_left(self) -> Node: ...
    def get_right(self) -> Node: ...
    def getter(self, target: Gindex) -> Node: ...
    def is_leaf(self) -> bool: ...
    def rebind_left(self, v: Node) -> Node: ...
    def rebind_right(self, v: Node) -> Node: ...
    def setter(self, target: Gindex, expand: bool=...) -> Link: ...
    def summarize_into(self, target: Gindex) -> SummaryLink: ...
    @property
    def root(self) -> Root: ...
    def merkle_root(self) -> Root: ...

zero_hashes: List[Root]

def zero_node(depth: int) -> RootNode: ...
def identity(v: Node) -> Node: ...
def compose(inner: Link, outer: Link) -> Link: ...

class NavigationError(RuntimeError): ...
V = TypeVar('V', bound=Node)

class RebindableNode(Node):
    def combine(self, left: Node, right: Node) -> Node: ...
    def rebind_left(self, v: Node) -> Node: ...
    def rebind_right(self, v: Node) -> Node: ...
    def setter(self, target: Gindex, expand: bool=...) -> Link: ...

class PairNode(RebindableNode, Node):
    left: Node
    right: Node
    def __init__(self, left: Node, right: Node) -> Any: ...
    def get_left(self) -> Node: ...
    def get_right(self) -> Node: ...
    def is_leaf(self) -> bool: ...
    def merkle_root(self) -> Root: ...

def subtree_fill_to_depth(bottom: Node, depth: int) -> Node: ...
def subtree_fill_to_length(bottom: Node, depth: int, length: int) -> Node: ...
def subtree_fill_to_contents(nodes: List[Node], depth: int) -> Node: ...

class RootNode(Node):
    def __init__(self, root: Root) -> Any: ...
    def getter(self, target: Gindex) -> Node: ...
    def is_leaf(self) -> bool: ...
    def setter(self, target: Gindex, expand: bool=...) -> Link: ...
    @property
    def root(self) -> Root: ...
    def merkle_root(self) -> Root: ...

def leaf_iter(node: Node) -> Iterator[Node]: ...
def get_diff(a: Node, b: Node) -> Iterator[Tuple[Node, Node]]: ...
