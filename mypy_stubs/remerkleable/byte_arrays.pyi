from remerkleable.basic import byte as byte, uint256 as uint256
from remerkleable.core import FixedByteLengthViewHelper as FixedByteLengthViewHelper, ObjParseException as ObjParseException, ObjType as ObjType, View as View, ViewHook as ViewHook, pack_bytes_to_chunks as pack_bytes_to_chunks, zero_node as zero_node
from remerkleable.tree import Gindex as Gindex, Node as Node, PairNode as PairNode, Root as Root, RootNode as RootNode, get_depth as get_depth, subtree_fill_to_contents as subtree_fill_to_contents, subtree_fill_to_length as subtree_fill_to_length, to_gindex as to_gindex
from typing import Any, BinaryIO, Optional, Type, TypeVar

RV = TypeVar('RV', bound='RawBytesView')

class RawBytesView(bytes, View):
    def __new__(cls, *args: Any, **kwargs: Any): ...
    @classmethod
    def default_bytes(cls: Any) -> bytes: ...
    @classmethod
    def coerce_view(cls: Type[RV], v: Any) -> RV: ...
    @classmethod
    def tree_depth(cls: Any) -> int: ...
    def set_backing(self, value: Any) -> None: ...
    @classmethod
    def decode_bytes(cls: Type[RV], bytez: bytes) -> RV: ...
    def encode_bytes(self) -> bytes: ...
    @classmethod
    def from_obj(cls: Type[RV], obj: ObjType) -> RV: ...
    def to_obj(self) -> ObjType: ...
    def navigate_view(self, key: Any) -> View: ...
BV = TypeVar('BV', bound='ByteVector')

class ByteVector(RawBytesView, FixedByteLengthViewHelper, View):
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __class_getitem__(cls: Any, length: Any) -> Type[ByteVector]: ...
    @classmethod
    def vector_length(cls): ...
    @classmethod
    def default_bytes(cls: Any) -> bytes: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...
    @classmethod
    def view_from_backing(cls: Type[BV], node: Node, hook: Optional[ViewHook]=...) -> BV: ...
    def get_backing(self) -> Node: ...
    @classmethod
    def navigate_type(cls: Any, key: Any) -> Type[View]: ...
    @classmethod
    def key_to_static_gindex(cls: Any, key: Any) -> Gindex: ...

Bytes1: Any
Bytes4: Any
Bytes8: Any
Bytes32: Any
Bytes48: Any
Bytes96: Any
BL = TypeVar('BL', bound='ByteList')

class ByteList(RawBytesView, FixedByteLengthViewHelper, View):
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __class_getitem__(cls: Any, limit: Any) -> Type[ByteList]: ...
    @classmethod
    def limit(cls: Any) -> int: ...
    @classmethod
    def default_bytes(cls: Any) -> bytes: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...
    @classmethod
    def view_from_backing(cls: Type[BL], node: Node, hook: Optional[ViewHook]=...) -> BL: ...
    def get_backing(self) -> Node: ...
    @classmethod
    def contents_depth(cls: Any) -> int: ...
    @classmethod
    def tree_depth(cls: Any) -> int: ...
    @classmethod
    def default_node(cls: Any) -> Node: ...
    @classmethod
    def navigate_type(cls: Any, key: Any) -> Type[View]: ...
    @classmethod
    def key_to_static_gindex(cls: Any, key: Any) -> Gindex: ...
    @classmethod
    def is_fixed_byte_length(cls: Any) -> bool: ...
    @classmethod
    def min_byte_length(cls: Any) -> int: ...
    @classmethod
    def max_byte_length(cls: Any) -> int: ...
    @classmethod
    def deserialize(cls: Type[BL], stream: BinaryIO, scope: int) -> BL: ...
    def value_byte_length(self) -> int: ...
