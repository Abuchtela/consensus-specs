from remerkleable.core import BasicView as BasicView, ObjParseException as ObjParseException, ObjType as ObjType, View as View
from typing import Any, Type, TypeVar

V = TypeVar('V', bound=View)

class OperationNotSupported(Exception): ...
BoolV = TypeVar('BoolV', bound='boolean')

class boolean(int, BasicView):
    def encode_bytes(self) -> bytes: ...
    def __new__(cls: Any, value: int) -> Any: ...
    def __add__(self, other: Any) -> None: ...
    def __sub__(self, other: Any) -> None: ...
    def __mul__(self, other: Any) -> None: ...
    def __floordiv__(self, other: Any) -> None: ...
    def __truediv__(self, other: Any) -> None: ...
    def __bool__(self): ...
    @classmethod
    def coerce_view(cls: Type[BoolV], v: Any) -> BoolV: ...
    @classmethod
    def type_byte_length(cls: Any) -> int: ...
    @classmethod
    def decode_bytes(cls: Type[BoolV], bytez: bytes) -> BoolV: ...
    @classmethod
    def from_obj(cls: Type[BoolV], obj: ObjType) -> BoolV: ...
    def to_obj(self) -> ObjType: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...
T = TypeVar('T', bound='uint')
W = TypeVar('W', bound=int)

class uint(int, BasicView):
    def __new__(cls: Any, value: int) -> Any: ...
    def __add__(self, other: int) -> T: ...
    def __radd__(self, other: int) -> T: ...
    def __sub__(self, other: int) -> T: ...
    def __rsub__(self, other: int) -> T: ...
    def __mul__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __mod__(self, other: int) -> T: ...
    def __rmod__(self, other: int) -> T: ...
    def __floordiv__(self, other: int) -> T: ...
    def __rfloordiv__(self, other: int) -> T: ...
    def __truediv__(self, other: Any) -> None: ...
    def __rtruediv__(self, other: Any) -> None: ...
    def __pow__(self, other: int, modulo: Any=...) -> T: ...
    def __rpow__(self, other: Any, modulo: Any=...) -> T: ...
    def __lshift__(self, other: int) -> T: ...
    def __rlshift__(self, other: W) -> W: ...
    def __rshift__(self, other: int) -> T: ...
    def __rrshift__(self, other: W) -> W: ...
    def __and__(self, other: int) -> T: ...
    def __rand__(self, other: int) -> T: ...
    def __xor__(self, other: int) -> T: ...
    def __rxor__(self, other: int) -> T: ...
    def __or__(self, other: int) -> T: ...
    def __ror__(self, other: int) -> T: ...
    def __neg__(self) -> None: ...
    def __invert__(self) -> T: ...
    def __pos__(self) -> T: ...
    def __abs__(self) -> T: ...
    @classmethod
    def coerce_view(cls: Type[T], v: Any) -> T: ...
    @classmethod
    def decode_bytes(cls: Type[T], bytez: bytes) -> T: ...
    def encode_bytes(self) -> bytes: ...
    @classmethod
    def from_obj(cls: Type[T], obj: ObjType) -> T: ...
    def to_obj(self) -> ObjType: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...

class uint8(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint16(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint32(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint64(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint128(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...
    def to_obj(self) -> ObjType: ...

class uint256(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...
    def to_obj(self) -> ObjType: ...

class bit(boolean): ...
class byte(uint8): ...
