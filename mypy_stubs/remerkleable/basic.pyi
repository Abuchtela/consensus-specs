from remerkleable.core import BasicView as BasicView, View as View
from typing import Any, Type, TypeVar

V = TypeVar('V', bound=View)

class boolean(int, BasicView):
    def encode_bytes(self) -> bytes: ...
    def __new__(cls: Any, value: int) -> Any: ...
    def __bool__(self): ...
    @classmethod
    def coerce_view(cls: Type[V], v: Any) -> V: ...
    @classmethod
    def type_byte_length(cls: Any) -> int: ...
    @classmethod
    def decode_bytes(cls: Type[V], bytez: bytes) -> V: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...

class uint(int, BasicView):
    def __new__(cls: Any, value: int) -> Any: ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    @classmethod
    def coerce_view(cls: Type[V], v: Any) -> V: ...
    @classmethod
    def decode_bytes(cls: Type[V], bytez: bytes) -> V: ...
    def encode_bytes(self) -> bytes: ...
    @classmethod
    def type_repr(cls: Any) -> str: ...

class uint8(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint16(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint32(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint64(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint128(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class uint256(uint):
    @classmethod
    def type_byte_length(cls: Any) -> int: ...

class bit(boolean): ...
class byte(uint8): ...
